name: Feature build and deploy

on:
  push:
    branches:
      - feature/**
      - bug/**
      - hotfix/**
      - dependabot/**

jobs:
  build:
    name: Build and Deploy Feature
    runs-on: self-hosted
    env:
      ENVIRONMENT_NAME: feature
      IMAGE_TAG: ${{ github.sha }}
      HELM_CHARTS_REPO_URL: https://chartmuseum.shared.aws.chgit.com
      HELM_CHARTS_VERSION: 1.5.5
    steps:
      - name: 'Fix permissions'
        run: sudo -S chown -R $USER:$USER $GITHUB_WORKSPACE

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.6.3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v1
        id: setup-kubectl

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.NONPROD_ROLE_ARN }}
          role-duration-seconds: 3600

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Variables
        run: |
          FEATURE_ID=$(echo -n ${{ github.ref }} | sed 's/.*\///g' | tr . - | tr '[:upper:]' '[:lower:]')
          PROJECT_NAME=$(echo ${{ github.repository }} | cut -d / -f2)
          RELEASE_NAME="${FEATURE_ID}--${PROJECT_NAME}"
          BASE_ENDPOINT=https://${RELEASE_NAME}.${ENVIRONMENT_NAME}.chgapi.net
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          echo "FEATURE_ID=$FEATURE_ID" >> $GITHUB_ENV
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
          echo "BASE_ENDPOINT=$BASE_ENDPOINT" >> $GITHUB_ENV
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV


      - name: Update Kubernetes Configuration for Non-Prod Cluster
        run: |
          aws eks --region us-west-2 update-kubeconfig --name ${{ secrets.NONPROD_CLUSTER_NAME }} --role-arn ${{ secrets.NONPROD_ROLE_ARN }}

      - name: Create ECR Repository
        run: |
          aws ecr create-repository --repository-name ${{ env.PROJECT_NAME }} || echo 'repository already created'

      - name: Wait For Repo to Exist
        timeout-minutes: 2
        run: |
          while ! aws ecr describe-repositories --repository-names ${{ env.PROJECT_NAME }} > /dev/null; do sleep 5; done

      - name: Build, Tag, and Push BE Image to Amazon ECR
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}:${{ env.IMAGE_TAG }}-BE server/src/. --build-arg NPM_TOKEN=${{ secrets.NPM_TOKEN }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}:${{ env.IMAGE_TAG }}

      - name: Build, Tag, and Push FE Image to Amazon ECR
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}:${{ env.IMAGE_TAG }}-FE fe/. --build-arg NPM_TOKEN=${{ secrets.NPM_TOKEN }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}:${{ env.IMAGE_TAG }}

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ env.ECR_REGISTRY }}

      - name: Update Kubernetes Configuration for Non-Prod Cluster
        run: |
          aws eks --region us-west-2 update-kubeconfig --name ${{ secrets.NONPROD_CLUSTER_NAME }} --role-arn ${{ secrets.NONPROD_ROLE_ARN }}

      - name: Deploy Feature
        run: |
          helm list -n ${{ env.ENVIRONMENT_NAME }} \
            | grep  "${{ env.RELEASE_NAME }}" \
            | grep "failed" > /dev/null \
            && echo "\033[0;31m
              A prior helm install failed. This is preventing subsequent attempts from succeeding.
              Please resolve the issue and delete the failed install with the following command before re-running the workflow:
              helm delete ${{ env.PROJECT_NAME }} -n ${{ env.ENVIRONMENT_NAME }}
              \033[0m"
          helm repo update
          helm upgrade ${{ env.RELEASE_NAME }} chg/service \
            --install \
            --wait \
            --set "image.repository=${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}" \
            --set "image.tag=${{ env.IMAGE_TAG }}" \
            --set "feature=${{ env.FEATURE_ID }}" \
            --set "project=${{ env.PROJECT_NAME }}" \
            --set jobs[0].containerName="${{ env.PROJECT_NAME }}-integration-test-runner" \
            --set jobs[0].image="${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}:${{ env.IMAGE_TAG }}" \
            --set jobs[0].envs[0].name='BASE_ENDPOINT' \
            --set jobs[0].envs[0].value="${{ env.BASE_ENDPOINT }}" \
            --namespace=${{ env.ENVIRONMENT_NAME }} \
            --version ${{ env.HELM_CHARTS_VERSION }} \
            --debug \
            -f values/values-dev.yaml

      - name: Output Service URL(s)
        run: |
          echo "Access the service at the following URL(s):"
          kubectl get virtualservice -n ${{ env.ENVIRONMENT_NAME }} ${{ env.RELEASE_NAME }} -o=json | jq '.spec.hosts[]' | tr -d '"' | awk '{print "https://"$1}'